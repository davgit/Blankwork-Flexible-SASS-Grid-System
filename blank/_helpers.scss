// 
// These mixins are for the library to use only, you should not need to modify
// them at all.
// *
// Enclose a block of code with a media query as named in `$breakpoints`.
@mixin media-query($media-query){
    $breakpoint-found: false;

    @each $breakpoint in $breakpoints{
        // This is a loop, no need to do all that other stuff if the breakpoint was already found
        @if $breakpoint_found != true {       
            
            $name: nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $media-query == $name and $declaration{
                $breakpoint-found: true;

                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    } // end @each;

    @if $breakpoint-found == false{
        @warn "Breakpoint ‘#{$media-query}’ does not exist"
    }
}


// 
// Drop relative positioning into silent classes which can’t take advantage of
// the `[class*="push--"]` and `[class*="pull--"]` selectors.

@mixin silent-relative() {
    @if $use_sass_placeholders == true{
        position:relative;
    }
}

@function get_name($column_map, $columns) {
    // We don't have "one-whole" in Source Maps
    // Thereby a map for 12 columns contains only 11 items
    // We're accounting for the 12th item here: 
    
    @if (length($column_map) < $columns) {
        @return "one-whole";
    }
    
    $column_information: nth($column_map, $columns);
    $column_name: nth($column_information, 2);
    @return $column_name;
}

@function get_width($column_map, $columns) {
    // Same as with get_col_name
    // Only this time we're returning 100% in that special case
    @if (length($column_map) < $columns) {
        @return 100;
    }
    
    $column_information: nth($column_map, $columns);
    $column_name: nth($column_information, 1);
    @return $column_name;
}


@mixin column($columns: 12, $class: "", $column_map: $desk_map) {
    @if $class != "" {
        $class: unquote("#{$class}-"); // Add the dash
    } 

    $column_class: get_name($column_map, $columns);

    @extend #{$prefix-type}#{$class}#{$column_class};
    @extend #{$prefix_type}column;
}

@mixin push($columns: 12, $class: "", $column_map: $desk_map) {
    @if $class != "" {
        $class: unquote("#{$class}-"); // Add the dash
    } 

    $column_class: get_name($column_map, $columns);

    @extend #{$prefix_type}#{$class}push-#{$column_class};
}



// @mixin column($columns: 12, $class: false, $column_map: $desk_map) {
//     @if $class != false {
//         $class: "#{$class}-"; // Add the dash
//     } 
//     @else {
//         $class: "";
//     }

//     $column_class: get_name($column_map, $columns);

//     @extend #{$prefix-type}#{$class}#{$column_class};
//     @extend #{$prefix_type}column;
// }

@mixin palm($columns: $max_palm_columns) {
    @if $columns > $max_palm_columns{
        @warn "You passed in #{$columns} columns, but you can't have more than #{$max_palm_columns} with the current map that you've set!";
    }
    @include column($columns, palm, $palm_map);
}
@mixin lap($columns: $max_lap_columns) {
    @if $columns > $max_lap_columns{
        @warn "You passed in #{$columns} columns, but you can't have more than #{$max_lap_columns} with the current map that you've set!";
    }
    @include column($columns, lap, $lap_map);
}
@mixin portable($columns: $max_palm_columns) {
    @if $columns > $max_portable_columns{
        @warn "You passed in #{$columns} columns, but you can't have more than #{$max_portable_columns} with the current map that you've set!";
    }
    @include column($columns, portable, $portable_map);
}
@mixin desk($columns: $max_desk_columns) {
    @if $columns > $max_desk_columns{
        @warn "You passed in #{$columns} columns, but you can't have more than #{$max_desk_columns} with the current map that you've set!";
    }
    @include column($columns, desk, $desk_map);
}




// /* -----------------------------------*/
// /*         Wrappers
// /* -----------------------------------*/

@mixin wrapper($direct_child: false) {
    @extend #{$prefix_type}grid-wrapper;
    
    @if $direct_child != false {
        @extend #{$prefix_type}grid-wrapper;
    }
}

// A wrapper is also a container
// A matter of preference
@mixin container($args...) {
    @include wrapper;
}


/* ---------------------------------------*/
/*  Functions to generate mapped classes
/* ---------------------------------------*/
// Generate Widths
@mixin widths_from_map($map, $namespace, $prefix) {
    $columns: 0;
    @each $minimap in $map {
        $columns: $columns + 1;

        $class_name: get_name($map, $columns);
        $class_value: get_width($map, $columns);
    
        @if type-of($class_value) == "string" {
            #{$prefix}#{$namespace}#{$class_name} { @extend #{$prefix}#{$namespace}#{$class_value}; }
        }
        @else {
            #{$prefix}#{$namespace}#{$class_name} { width: unquote("#{$class_value}%"); }   
        }
    }
}

// Generate Position
@mixin rules_from_map($type, $property, $map, $namespace, $prefix) {
    $columns: 0;
    @each $minimap in $map {
        $columns: $columns + 1;

        $class_name: get_name($map, $columns);
        $class_value: get_width($map, $columns);
    
        @if type-of($class_value) == "string" {
            #{$prefix}#{$namespace}#{$type}#{$class_name} { @extend #{$prefix}#{$namespace}#{$type}#{$class_value}; }
        }
        @else {
            #{$prefix}#{$namespace}#{$type}#{$class_name} { #{$property}: unquote("#{$class_value}%"); @include silent-relative(); }   
        }
    }
}









