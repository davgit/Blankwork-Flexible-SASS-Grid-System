// /* -----------------------------------*/
// /*  Functions
// /* -----------------------------------*/
@function sanitize_columns($columns, $column_map: $desk_map) {
    
    @if($allow_split_grids == true and $columns < 1) {

        $calculated_columns: ( length($column_map) + 1 ) * $columns;
        
        // If a rounded number isn't the same as the actual value, it's a split value.
        // Only return this if we have a real column
        // Otherwise return what was passed in and let someone else deal with this.
        @if(round($calculated_columns) == $calculated_columns) {
            @return $calculated_columns;
        }
    }

    @return $columns;
}

// 
// Drop relative positioning into silent classes which canâ€™t take advantage of
// the `[class*="push--"]` and `[class*="pull--"]` selectors.
// 
@mixin silent-relative() {
    @if $use_sass_placeholders == true {
        position:relative;
    }
}

// /* -----------------------------------*/
// /*  Translate Number to Name
// /* -----------------------------------*/
@function get_name($column_map, $columns) {
    $columns: sanitize_columns($columns, $column_map);

    @if ($columns >= 1) {
        // We don't have "one-whole" in Source Maps
        // Thereby a map for 12 columns contains only 11 items
        // We're accounting for the 12th item here: 
        $max_columns: length($column_map) + 1;
        @if ( $max_columns <= $columns) {
            @return "one-whole";
        }
        
        // Get information about this column
        $column_information: nth($column_map, $columns);
        $column_name: nth($column_information, 2);

        @return $column_name;
    }

    @else {
        $width: $columns * 100;
        @each $minimap in $column_map_all_values {
                    $minimap_value: nth($minimap, 1);
                    @if(round($minimap_value) == round($width)) {
                        @return nth($minimap, 2);
                    }
        } // end @each

        // Returning false, because it is a value < 1, which has failed in Sanitization (probabbly twice),
        // And is not found in our "all column names" list
        // Which means a name does not exist for this bastard!
        @return false;
    }
}


// /* -----------------------------------*/
// /*  Translate Number to Width
// /* -----------------------------------*/

// NOT FOR PUBLIC USE.
// It won't return all withs, it may return a string with the class name instead
// It's okay for the Grid and Column generating functions for now
// But definitely needs a little revamp.
@function get_width($column_map, $columns) {
    $columns: sanitize_columns($columns, $column_map);


    // Same as with get_col_name
    // Only this time we're returning 100% in that special case
    @if (length($column_map) < $columns) {
        @return 100;
    }
    
    $column_information: nth($column_map, $columns);
    $width: nth($column_information, 1);
    @return $width;
}


@mixin col($columns: 12, $class: "", $column_map: $desk_map) {
    $sanitized_columns: sanitize_columns($columns, $column_map);

    @if $class != "" {
        $class: unquote("#{$class}-"); // Add the dash
    } 

    $column_class: get_name($column_map, $sanitized_columns);
    @if($column_class != false) {
        @extend #{$prefix-type}#{$class}#{$column_class};
    }
    @else {
            width: $columns * 100%;
    } 

    @extend #{$prefix_type}#{$class}column;
}



/* ---------------------------------------*/
/*  Functions to generate mapped classes
/* ---------------------------------------*/
// Generate Widths
@mixin widths_from_map($map, $namespace, $prefix) {
    $columns: 0;
    @each $minimap in $map {
        $columns: $columns + 1;

        $class_name: get_name($map, $columns);
        $class_value: get_width($map, $columns);
    
        @if type-of($class_value) == "string" {
            #{$prefix}#{$namespace}#{$class_name} { @extend #{$prefix}#{$namespace}#{$class_value}; }
        }
        @else {
            #{$prefix}#{$namespace}#{$class_name} { width: unquote("#{$class_value}%"); }   
        }
    }
}

// Generate Position
@mixin rules_from_map($type, $property, $map, $namespace, $prefix) {
    $columns: 0;
    @each $minimap in $map {
        $columns: $columns + 1;

        $class_name: get_name($map, $columns);
        $class_value: get_width($map, $columns);
    
        @if type-of($class_value) == "string" {
            #{$prefix}#{$type}#{$namespace}#{$class_name} { 
                @extend #{$prefix}#{$type}#{$namespace}#{$class_value};  
                position: relative;
             }
        }
        @else {
            #{$prefix}#{$type}#{$namespace}#{$class_name} { 
                #{$property}: unquote("#{$class_value}%"); 
                position: relative;
             }   
        }
    }
}









